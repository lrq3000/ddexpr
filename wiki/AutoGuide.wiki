#summary A Guide to Use Our Prototype.
#labels Featured,Phase-Deploy

<wiki:toc max_depth="2" />

= Preliminaries =

A user reported a bug of findutils-4.2.18 on [http://savannah.gnu.org/bugs/?12181 Savannah]. The steps to reproduce the failure were also given:
{{{
$ mkdir dir
$ ln -s dir link
$ touch dir/file
$ find -H link
}}}

He mentioned that the bug was not observed with findutils-4.2.15. Therefore, findutils-4.2.15(P) and findutils-4.2.18(P') were used in this experiment. The git repository is available at [http://git.savannah.gnu.org/cgit/findutils.git].

== Getting a Copy of the Git Repository ==
Checkout the Git Repository by type:
{{{
git clone git://git.savannah.gnu.org/findutils.git
}}}
After that, renamed the repository as `bak_findutils` for future use.

== A Way of Building Programs Automatically ==
To apply delta debugging, a way of building program automatically. Specifically, a script named `compiler_find-a.sh` is provided under the directory `/script/`:

<code language="bash">
#./compiler_find-a.sh dir program
#!/bin/bash

cd ..
home=$(pwd)
echo $home
script=$home/script
output=$home/output
dir=$home/$1
program=$2
cd $dir
cp ../prepare/cp_find-a.sh ./
sh ./cp_find-a.sh
echo "start compile"
echo "configure ..."
./configure --prefix=$dir 1> /dev/null 2>> $output/compileLog_$program.txt
echo "make ..."
make 1> /dev/null 2>> $output/compileLog_$program.txt
echo "compile end"
cd $script
</code>

== Construction of _test_ Functions ==

Delta debugging requires a _test_ function to check whether the failure occurs (*Fail*) or not (*Pass*) or whether the result is undecided (*Unresolved*). When findutils-4.2.18 fails, the _error output_ is:
{{{
./find/find: link: Too many levels of symbolic links
}}}
while, when findutils-4.2.15 fails, the _standt output_ is:
{{{
link
link/file
}}}
Therefore, by comparing outputs, test results can be determined.
Specifically, we created two files named `find-a_pass` and `find-a_fail` under the directory `/oracle/`.

The script used to determine test results is named `test_find-a.sh` under the directory `/script/`:


<code language="bash">
#!/bin/sh dir oracle_fail oracle_pass program

cd ..
home=$(pwd)
output=$home/output/
dir=$home/$1/
program=$4
cd $dir
mkdir dir
ln -s dir link
touch dir/file
./find/find -H link >output_file 2>output_file_err

if cmp output_file_err ../oracle/$2 1> /dev/null 2>> $output/compileLog_$program.txt
then 
    status=0
else
    if cmp output_file ../oracle/$3 1> /dev/null 2>> $output/compileLog_$program.txt
    then 
        status=1
    else 
        status=125
    fi
fi

echo $status
</code>

Note that the script in the above example output code 0 if the current test result is (*Fail*), and output code 1 if the current test result is (*Pass*), otherwise, 125 is outpur if the current test result is (*Unresolved*).

== Preparation of Versions ==
To apply our prototype, both the names of a worked and a broken
commit object (FINDUTILS_4_2_18-1 and FINDUTILS_4_2_15-1)should be specified in the file named `configure.xml` under the directory of `/script/`:

{{{
<?xml version="1.0" ?>
<root>
    <find-a>
        <bak_dir>bak_findutils</bak_dir>
        <dir>findutils</dir>
        <bad_version>FINDUTILS_4_2_18-1</bad_version>
        <good_version>FINDUTILS_4_2_15-1</good_version>
        <oracle_fail>find-a_fail</oracle_fail>
        <oracle_pass>find-a_pass</oracle_pass>
        <exe>/find/find</exe>
    </find-a>
</root>
}}}

= Invoking `git bisect` =
We provide a python file named `run.py` under `/script/` to invoke `git bisect` to find the commit that introduced the regression by just type:
{{{
python run.py find-a
}}}




= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages